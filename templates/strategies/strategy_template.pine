// @version=6

// @description [Brief description of what this strategy does]
strategy(
    title="[Strategy Name]",
    shorttitle="[Short Name]",
    overlay=true,  // Usually true for strategies to show on price chart
    initial_capital=10000,
    default_qty_type=strategy.percent_of_equity,
    default_qty_value=100,
    commission_type=strategy.commission.percent,
    commission_value=0.1,
    slippage_points=1,
    max_bars_back=5000,
    process_orders_on_close=false
)

// ============================================================================
// CONSTANTS
// ============================================================================

const string STRATEGY_NAME = "[Strategy Name]"
const color LONG_COLOR = color.green
const color SHORT_COLOR = color.red

// ============================================================================
// INPUTS
// ============================================================================

// Entry Settings
fastLengthInput = input.int(
    defval=10,
    title="Fast Length",
    minval=1,
    maxval=100,
    group="Entry Settings"
)

slowLengthInput = input.int(
    defval=20,
    title="Slow Length",
    minval=1,
    maxval=200,
    group="Entry Settings"
)

// Risk Management
stopLossInput = input.float(
    defval=2.0,
    title="Stop Loss (%)",
    minval=0.1,
    maxval=10.0,
    step=0.1,
    group="Risk Management"
) / 100

takeProfitInput = input.float(
    defval=4.0,
    title="Take Profit (%)",
    minval=0.1,
    maxval=20.0,
    step=0.1,
    group="Risk Management"
) / 100

// Date Range
startDate = input.time(
    defval=timestamp("2020-01-01"),
    title="Start Date",
    group="Backtest Range"
)

endDate = input.time(
    defval=timestamp("2025-12-31"),
    title="End Date",
    group="Backtest Range"
)

inDateRange = time >= startDate and time <= endDate

// ============================================================================
// USER-DEFINED FUNCTIONS
// ============================================================================

//@function calculateSignal
//@param fastValue {series float} Fast indicator value
//@param slowValue {series float} Slow indicator value
//@returns {int} Signal direction (1 for long, -1 for short, 0 for no signal)
calculateSignal(fastValue, slowValue) =>
    signal = 0
    if ta.crossover(fastValue, slowValue)
        signal := 1
    else if ta.crossunder(fastValue, slowValue)
        signal := -1
    signal

// ============================================================================
// CORE CALCULATIONS
// ============================================================================

// Calculate indicators
fastMA = ta.sma(close, fastLengthInput)
slowMA = ta.sma(close, slowLengthInput)

// Generate signals
signal = calculateSignal(fastMA, slowMA)

// Entry conditions
longCondition = signal == 1 and inDateRange
shortCondition = signal == -1 and inDateRange

// ============================================================================
// STRATEGY LOGIC
// ============================================================================

// Entry orders
if longCondition
    strategy.entry("Long", strategy.long)

if shortCondition
    strategy.entry("Short", strategy.short)

// Exit orders with stop loss and take profit
if strategy.position_size > 0
    strategy.exit(
        "Long Exit",
        "Long",
        stop=strategy.position_avg_price * (1 - stopLossInput),
        limit=strategy.position_avg_price * (1 + takeProfitInput)
    )

if strategy.position_size < 0
    strategy.exit(
        "Short Exit",
        "Short",
        stop=strategy.position_avg_price * (1 + stopLossInput),
        limit=strategy.position_avg_price * (1 - takeProfitInput)
    )

// ============================================================================
// PLOTTING AND VISUALS
// ============================================================================

// Plot moving averages
plot(fastMA, "Fast MA", color=LONG_COLOR, linewidth=2)
plot(slowMA, "Slow MA", color=SHORT_COLOR, linewidth=2)

// Plot entry signals
plotshape(
    longCondition,
    style=shape.triangleup,
    location=location.belowbar,
    color=LONG_COLOR,
    size=size.small,
    title="Long Entry"
)

plotshape(
    shortCondition,
    style=shape.triangledown,
    location=location.abovebar,
    color=SHORT_COLOR,
    size=size.small,
    title="Short Entry"
)

// Background color for position
bgcolor(
    strategy.position_size > 0 ? color.new(LONG_COLOR, 95) :
    strategy.position_size < 0 ? color.new(SHORT_COLOR, 95) : na,
    title="Position Background"
)

// ============================================================================
// ALERTS
// ============================================================================

// Alert conditions
if longCondition
    alert("Long entry signal", alert.freq_once_per_bar)

if shortCondition
    alert("Short entry signal", alert.freq_once_per_bar)
